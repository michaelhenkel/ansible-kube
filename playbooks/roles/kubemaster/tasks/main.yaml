---
- name: get control network
  set_fact:
    control_ip: "{{ ansible_all_ipv4_addresses | ipaddr(control_network) }}"
  when: control_network is defined

- name: set control ip
  set_fact:
    control_ip: "{{ control_ip[0] }}"

- name: get fqdn for control network
  shell: "python -c 'import socket; print socket.getfqdn(\"{{ control_ip }}\")'"
  register: output

- set_fact:
    control_fqdn: "{{ output.stdout }}"

- name: create control fqdn for all masters
  include: control_fqdn.yaml
  with_items:
    - "{{ groups['masters'] }}"

- name: create api lb
  include: api_lb.yaml

- name: get first master
  set_fact:
    master_of_masters: "{{ groups['masters'][0] }}"

- name: setup master of masters
  include: master_of_masters.yaml
  when: master_of_masters == ansible_host

- name: create /etc/kubernetes/pki/etcd
  file:
    path: /etc/kubernetes/pki/etcd
    state: directory
    mode: 0755
  when: master_of_masters != ansible_host

- name: copy stuff from master of masters
  synchronize:
    src: "{{ item }}"
    dest: "{{ item }}"
    mode: push
  delegate_to: "{{ groups['masters'][0] }}"
  with_items:
    - /etc/kubernetes/pki/ca.crt
    - /etc/kubernetes/pki/ca.key
    - /etc/kubernetes/pki/sa.key
    - /etc/kubernetes/pki/sa.pub
    - /etc/kubernetes/pki/front-proxy-ca.crt
    - /etc/kubernetes/pki/front-proxy-ca.key
    - /etc/kubernetes/pki/etcd/ca.crt
    - /etc/kubernetes/pki/etcd/ca.key
    - /etc/kubernetes/admin.conf

- name: create join token
  block:
    - shell: kubeadm token create
      register: output
    - set_fact:
        join_token: "{{ output.stdout }}"
  delegate_to: "{{ master_of_masters }}"
  run_once: true

- name: create discovery token
  block:
    - shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
      register: output
    - set_fact:
        discovery_token: "{{ output.stdout }}"
  delegate_to: "{{ master_of_masters }}"
  run_once: true

- name: setup remaining masters
  include: master.yaml
  when: master_of_masters != ansible_host

- name: delete join token
  shell: "kubeadm token delete {{ hostvars[groups['masters'][0]]['join_token'] }}"
  delegate_to: "{{ master_of_masters }}"
  run_once: true
